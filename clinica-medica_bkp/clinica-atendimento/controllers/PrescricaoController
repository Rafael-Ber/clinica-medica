package br.edu.imepac.controllers;

import br.edu.imepac.services.PrescricaoService;
import br.edu.imepac.dto.PrescricaoDto;
import br.edu.imepac.models.Prescricao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/prescricoes")
public class PrescricaoController {

    private final PrescricaoService prescricaoService;

    @Autowired
    public PrescricaoController(PrescricaoService prescricaoService) {
        this.prescricaoService = prescricaoService;
    }

    @GetMapping
    public ResponseEntity<List<PrescricaoDto>> getAllPrescricoes() {
        List<PrescricaoDto> prescricoes = prescricaoService.findAll().stream()
                .map(prescricaoService::convertToDto)
                .collect(Collectors.toList());
        return ResponseEntity.ok(prescricoes);
    }

    @GetMapping("/{id}")
    public ResponseEntity<PrescricaoDto> getPrescricaoById(@PathVariable Long id) {
        return prescricaoService.findById(id)
                .map(prescricao -> ResponseEntity.ok(prescricaoService.convertToDto(prescricao)))
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<PrescricaoDto> createPrescricao(@RequestBody PrescricaoDto prescricaoDto) {
        Prescricao prescricao = prescricaoService.convertToEntity(prescricaoDto);
        Prescricao savedPrescricao = prescricaoService.save(prescricao);
        PrescricaoDto savedPrescricaoDto = prescricaoService.convertToDto(savedPrescricao);
        return new ResponseEntity<>(savedPrescricaoDto, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<PrescricaoDto> updatePrescricao(@PathVariable Long id, @RequestBody PrescricaoDto prescricaoDto) {
        if (!prescricaoService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        prescricaoDto.setId(id);
        Prescricao prescricao = prescricaoService.convertToEntity(prescricaoDto);
        Prescricao updatedPrescricao = prescricaoService.save(prescricao);
        PrescricaoDto updatedPrescricaoDto = prescricaoService.convertToDto(updatedPrescricao);
        return ResponseEntity.ok(updatedPrescricaoDto);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePrescricao(@PathVariable Long id) {
        if (!prescricaoService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        prescricaoService.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}